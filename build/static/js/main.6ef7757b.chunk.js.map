{"version":3,"sources":["pages/Header.js","pages/Footer.js","pages/EmployeeDetail.js","pages/Employee.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Footer","EmpployeeDetails","props","id","fname","lname","cellphone","location","Employee","state","employeerecords","componentDidMount","Axios","get","then","response","console","log","i","data","results","length","push","login","uuid","name","first","last","cell","city","setState","this","map","rec","key","React","Component","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sNAOeA,MANf,WACI,OAAQ,qBAAKC,UAAU,YAAf,SACJ,4DCIOC,MANf,WACI,OAAQ,qBAAKD,UAAU,YAAf,SACJ,2D,iDCWOE,MAVf,SAA0BC,GACtB,OAAO,+BACH,6BAAKA,EAAMC,KACX,6BAAKD,EAAME,QACX,6BAAKF,EAAMG,QACX,6BAAKH,EAAMI,YACX,6BAAKJ,EAAMK,eCgDJC,E,4MApDXC,MAAQ,CACJC,gBAAiB,I,EAErBC,kBAAoB,WAChB,IAAID,EAAkB,GACtBE,IAAMC,IAAI,iDAAiDC,MAAK,SAACC,GAC7DC,QAAQC,IAAIF,GACZ,IAAI,IAAIG,EAAI,EAAGA,EAAIH,EAASI,KAAKC,QAAQC,OAAQH,IAC7CR,EAAgBY,KAAK,CACjBnB,GAAIY,EAASI,KAAKC,QAAQF,GAAGK,MAAMC,KACnCpB,MAAOW,EAASI,KAAKC,QAAQF,GAAGO,KAAKC,MACrCrB,MAAOU,EAASI,KAAKC,QAAQF,GAAGO,KAAKE,KACrCrB,UAAWS,EAASI,KAAKC,QAAQF,GAAGU,KACpCrB,SAAUQ,EAASI,KAAKC,QAAQF,GAAGX,SAASsB,OAGpD,EAAKC,SAAS,CAACpB,oBACfM,QAAQC,IAAI,EAAKR,MAAMC,qB,uDAI3B,OAAQ,sBAAKX,UAAU,YAAf,UACJ,kCACI,gCACI,+BACI,oCACA,4CACA,4CACA,sCACA,+CAGR,gCACKgC,KAAKtB,MAAMC,gBAAgBsB,KAAI,SAACC,EAAIC,GAAL,OAC5B,cAAC,EAAD,CACG/B,GAAM8B,EAAI9B,GACVC,MAAO6B,EAAI7B,MACXC,MAAO4B,EAAI5B,MACXC,UAAW2B,EAAI3B,UACfC,SAAU0B,EAAI1B,UACT2B,WAnBhB,gB,GAtBOC,IAAMC,WCiBdC,MAhBf,WACE,OACE,sBAAKtC,UAAU,MAAf,UACE,cAAC,EAAD,IAGA,cAAC,EAAD,IAGA,cAAC,EAAD,QCHcuC,QACW,cAA7BC,OAAOhC,SAASiC,UAEe,UAA7BD,OAAOhC,SAASiC,UAEhBD,OAAOhC,SAASiC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.6ef7757b.chunk.js","sourcesContent":["import React from 'react';\nfunction Header () {\n    return (<div className='jumbotron'>\n        <h1>Employee User Directory</h1>\n    </div>)\n}\n\nexport default Header;","import React from 'react';\nfunction Footer () {\n    return (<div className='jumbotron'>\n        <h1>Copy Rights Frank &copy;</h1>\n    </div>)\n}\n\nexport default Footer;","import React from \"react\";\nimport Employee from \"./Employee\";\n\n\nfunction EmpployeeDetails(props){\n    return(<tr>\n        <td>{props.id}</td>\n        <td>{props.fname}</td>\n        <td>{props.lname}</td>\n        <td>{props.cellphone}</td>\n        <td>{props.location}</td>\n    </tr>)\n}\n\nexport default EmpployeeDetails;","import React from 'react';\nimport Axios from 'axios';\nimport EmpolyeeDetail from \"./EmployeeDetail\";\n//REACT Class component\n\nclass Employee extends React.Component {\n    state = {\n        employeerecords: []\n    }\n    componentDidMount = () => {\n        var employeerecords = [];\n        Axios.get('https://randomuser.me/api/?results=200&nat=us').then((response)=>{\n            console.log(response)\n            for(let i = 0; i < response.data.results.length; i++){\n                employeerecords.push({\n                    id: response.data.results[i].login.uuid,\n                    fname: response.data.results[i].name.first ,\n                    lname: response.data.results[i].name.last ,\n                    cellphone: response.data.results[i].cell ,\n                    location: response.data.results[i].location.city\n                })\n            }\n            this.setState({employeerecords})\n            console.log(this.state.employeerecords)\n        })\n    }\n    render() {\n        return (<div className='container'>\n            <table>\n                <thead>\n                    <tr>\n                        <th>ID</th>\n                        <th>First name</th>\n                        <th> Last name</th>\n                        <th>Cell</th>\n                        <th>Location</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.state.employeerecords.map((rec,key) => (\n                        <EmpolyeeDetail \n                           id = {rec.id}\n                           fname={rec.fname}\n                           lname={rec.lname}\n                           cellphone={rec.cellphone}\n                           location={rec.location}\n                           key={key}\n                           />\n\n                    ))}\n                </tbody>\n            </table>\n            hiiiii\n        </div>)\n\n    }\n}\n\nexport default Employee;\n","import React from 'react';\nimport './App.css';\nimport Header from './pages/Header';\nimport Footer from './pages/Footer';\nimport Employee from './pages/Employee';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header>\n        \n      </Header>\n      <Employee>\n\n      </Employee>\n      <Footer>\n        \n      </Footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}